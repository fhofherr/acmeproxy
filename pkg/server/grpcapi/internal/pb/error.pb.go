// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/server/grpcapi/internal/pb/error.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Error struct {
	Op   string `protobuf:"bytes,1,opt,name=op,proto3" json:"op,omitempty"`
	Kind int32  `protobuf:"varint,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Msg  string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	// Types that are valid to be assigned to Err:
	//	*Error_Plain
	//	*Error_Nested
	Err                  isError_Err `protobuf_oneof:"err"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8b8c0032de13fab, []int{0}
}

func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *Error) GetKind() int32 {
	if m != nil {
		return m.Kind
	}
	return 0
}

func (m *Error) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type isError_Err interface {
	isError_Err()
}

type Error_Plain struct {
	Plain string `protobuf:"bytes,4,opt,name=plain,proto3,oneof"`
}

type Error_Nested struct {
	Nested *Error `protobuf:"bytes,5,opt,name=nested,proto3,oneof"`
}

func (*Error_Plain) isError_Err() {}

func (*Error_Nested) isError_Err() {}

func (m *Error) GetErr() isError_Err {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *Error) GetPlain() string {
	if x, ok := m.GetErr().(*Error_Plain); ok {
		return x.Plain
	}
	return ""
}

func (m *Error) GetNested() *Error {
	if x, ok := m.GetErr().(*Error_Nested); ok {
		return x.Nested
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Error) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Error_Plain)(nil),
		(*Error_Nested)(nil),
	}
}

func init() {
	proto.RegisterType((*Error)(nil), "pb.Error")
}

func init() {
	proto.RegisterFile("pkg/server/grpcapi/internal/pb/error.proto", fileDescriptor_a8b8c0032de13fab)
}

var fileDescriptor_a8b8c0032de13fab = []byte{
	// 177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x2c, 0x8e, 0x41, 0x0a, 0xc2, 0x30,
	0x10, 0x45, 0x9b, 0xb4, 0x29, 0x74, 0x04, 0x91, 0x2c, 0x24, 0xcb, 0xa2, 0x9b, 0xe2, 0xa2, 0x01,
	0xbd, 0x81, 0x20, 0x74, 0x9d, 0x1b, 0x34, 0x36, 0x94, 0xd0, 0x9a, 0x0c, 0xd3, 0xe2, 0xde, 0x9b,
	0x4b, 0xa3, 0xbb, 0x37, 0x6f, 0x3e, 0xfc, 0x0f, 0x17, 0x9c, 0x46, 0xbd, 0x38, 0x7a, 0x3b, 0xd2,
	0x23, 0xe1, 0xb3, 0x47, 0xaf, 0x7d, 0x58, 0x1d, 0x85, 0x7e, 0xd6, 0x68, 0xb5, 0x23, 0x8a, 0xd4,
	0x22, 0xc5, 0x35, 0x4a, 0x8e, 0xf6, 0xf4, 0x61, 0x20, 0x1e, 0x9b, 0x93, 0x7b, 0xe0, 0x11, 0x15,
	0xab, 0x59, 0x53, 0x19, 0x1e, 0x51, 0x4a, 0x28, 0x26, 0x1f, 0x06, 0xc5, 0x6b, 0xd6, 0x08, 0x93,
	0x58, 0x1e, 0x20, 0x7f, 0x2d, 0xa3, 0xca, 0x53, 0x68, 0x43, 0x79, 0x04, 0x81, 0x73, 0xef, 0x83,
	0x2a, 0x36, 0xd7, 0x65, 0xe6, 0x77, 0xca, 0x33, 0x94, 0xc1, 0x2d, 0xab, 0x1b, 0x94, 0xa8, 0x59,
	0xb3, 0xbb, 0x56, 0x2d, 0xda, 0x36, 0x15, 0x75, 0x99, 0xf9, 0xbf, 0xee, 0x02, 0x72, 0x47, 0x64,
	0xcb, 0x34, 0xe7, 0xf6, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x32, 0x52, 0x6a, 0x56, 0xbc, 0x00, 0x00,
	0x00,
}
